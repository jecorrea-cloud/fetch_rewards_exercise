require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/transactions", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Transaction. As you add validations to Transaction, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {
      payer: "GOKU",
      points: 9001,
      timestamp: "2022-01-31T15:00:00"
    }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    {
      payer: nil,
      points: nil,
      timestamp: nil
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TransactionsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  # let(:valid_headers) {
  #   {}
  # }

  describe "GET /balances" do
    it "renders a successful response" do
      Transaction.create(valid_attributes)
      get balances_url, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /add_transaction" do
    context "with valid parameters" do
      it "creates a new Transaction" do
        expect {
          post add_transaction_url,
               params: { transaction: valid_attributes }, as: :json
        }.to change(Transaction, :count).by(1)
      end

      it "renders a JSON response with the new transaction" do
        post add_transaction_url,
             params: { transaction: valid_attributes }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Transaction" do
        expect {
          post add_transaction_url,
               params: { transaction: invalid_attributes }, as: :json
        }.to change(Transaction, :count).by(0)
      end

      it "renders a JSON response with errors for the new transaction" do
        post add_transaction_url,
             params: { transaction: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end
end
